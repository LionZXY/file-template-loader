plugins {
  id 'org.jetbrains.kotlin.jvm'
  id "org.jetbrains.intellij"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(":ftl-runtime")

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlin_version"

  testImplementation "org.testng:testng:6.10"
  testImplementation "org.assertj:assertj-core:3.6.2"
}

intellij {
  version '2020.1.2'
  pluginName 'FileTemplate Loader'
  plugins 'Kotlin', 'Groovy', 'properties', 'java'
}

patchPluginXml {
  sinceBuild '171.0'
  pluginDescription 'Improved template engine for IntelliJ IDEA to generate templates, their groups and modules.\n' +
    'Supports the creation of multiple files organized in subdirectories, and insert code into existing files.\n' +
    'Allows you to use the parameters you want to enter when you create a template.'
}

tasks.create("copyJarToResources", Copy) {
  from configurations.runtimeClasspath
    .filter { File file ->
      file.name.contains("kotlin-script-runtime") ||
        file.name.contains("ftl-runtime") ||
        (file.name.contains("kotlin-stdlib") && !file.name.contains("kotlin-stdlib-common"))
    }
  into "src/main/resources"
  rename { String fileName ->
    fileName.replace("-${kotlin_version}", "")
  }
}
tasks.findByName("jar").dependsOn("copyJarToResources")
