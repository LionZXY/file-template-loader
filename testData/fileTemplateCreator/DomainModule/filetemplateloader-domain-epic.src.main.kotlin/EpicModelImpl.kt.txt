package com.github.rougsig.filetemplateloader.domain.epic

import io.reactivex.Observable
import com.github.rougsig.base.core.util.AppSchedulers
import com.github.rougsig.base.domain.core.model.SerialReactiveModel
import com.github.rougsig.base.domain.core.util.distinctFieldChanges
import com.github.rougsig.base.domain.core.util.toLceEventObservable
import com.github.rougsig.base.domain.entity.LceState
import com.github.rougsig.filetemplateloader.domain.epic.EpicModelImpl.State
import com.github.rougsig.filetemplateloader.domain.epic.EpicModelImpl.Request
import com.github.rougsig.filetemplateloader.domain.epic.EpicModelImpl.Action
import javax.inject.Inject

internal class EpicModelImpl @Inject constructor(
  schedulers: AppSchedulers
) :
  SerialReactiveModel<State, Request, Action>(
    initialState = State(),
    schedulers = schedulers
  ),
  EpicModel {


  override fun createCommand(request: Request, state: State): Observable<Action> {
    return Observable.empty()
  }

  override fun reduceState(previousState: State, action: Action): State {
    return previousState
  }

  data class State(
    val todoValue: Boolean = true
  )

  sealed class Request {
    object TodoRequest : Request()
  }

  sealed class Action {
    data class TodoAction(val state: LceState<Unit>) : Action()
  }
}
