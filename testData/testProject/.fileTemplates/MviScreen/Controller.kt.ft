package ${PACKAGE_NAME}

import android.view.View
import ${PACKAGE_BASE}.base.core.util.instance
import ${PACKAGE_BASE}.base.ui.mvi.core.ScopedMviController
import kotlinx.android.synthetic.main.${ANDROID_LAYOUT_SIMPLE_NAME_LOWER_SNAKE_CASE}.*
import ${SCREEN_CLASS_NAME}.ViewState
import ${SCREEN_CLASS_NAME}.ViewStateRenderer
import ${SCREEN_CLASS_NAME}.View as MviView

internal class ${SIMPLE_NAME} :
  ScopedMviController<ViewState, MviView, ${PRESENTER_SIMPLE_NAME}>(),
  MviView,
  ViewStateRenderer {

  override fun createScopedConfig() = object : ScopedMviController.Config<ViewState> {
    override val viewLayoutResource = R.layout.${ANDROID_LAYOUT_SIMPLE_NAME_LOWER_SNAKE_CASE}
    override val diffDispatcher = ViewStateDiffDispatcher.Builder().target(this@${SIMPLE_NAME}).build()
    override val presenterClass = ${PRESENTER_SIMPLE_NAME}::class.java
  }

  override fun initializeView(rootView: View) {

  }

  override fun createPresenter(): ${PRESENTER_SIMPLE_NAME} {
    return screenScope.instance()
  }
}
